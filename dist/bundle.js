/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/App.ts":
/*!********************!*\
  !*** ./src/App.ts ***!
  \********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/** app.ts\n * Initializes building objects using the BuildingFactory class.\n * Creates multiple buildings with a specified number of floors and elevators.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar BuildingFactory_1 = __webpack_require__(/*! ./BuildingFactory */ \"./src/BuildingFactory.ts\");\n// Instantiate a BuildingFactory object\nvar buildingFactory = new BuildingFactory_1.BuildingFactory();\n// Define the number of floors and elevators for each building\nvar numberOfFloors = 7;\nvar numberOfElevators = 3;\n// Define the number of buildings to create\nvar numberOfBuildings = 3;\n// Create buildings using the BuildingFactory\nfor (var i = 0; i < numberOfBuildings; i++) {\n    buildingFactory.createBuilding(numberOfFloors, numberOfElevators, i);\n}\n\n\n//# sourceURL=webpack:///./src/App.ts?");

/***/ }),

/***/ "./src/Building.ts":
/*!*************************!*\
  !*** ./src/Building.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/** Building.ts\n * Represents a building with floors and an elevator system.\n * Creates floor buttons, manages elevator requests, and updates floor buttons' timers.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Building = void 0;\nvar ElevatorSystem_1 = __webpack_require__(/*! ./ElevatorSystem */ \"./src/ElevatorSystem.ts\");\nvar Floor_1 = __webpack_require__(/*! ./Floor */ \"./src/Floor.ts\");\nvar Building = /** @class */ (function () {\n    /**\n     * Constructs a Building object with the specified number of floors, container element, and number of elevators.\n     * @param numberOfFloors The number of floors in the building.\n     * @param container The container element where the building will be displayed.\n     * @param numberOfElevators The number of elevators in the building.\n     */\n    function Building(numberOfFloors, container, numberOfElevators) {\n        this.numberOfFloors = numberOfFloors;\n        this.container = container;\n        this.numberOfElevators = numberOfElevators;\n        this.createFloorButtons();\n        this.createElevatorSystem();\n        this.setupElevatorArrivalListener();\n    }\n    /**\n     * Creates floor buttons for each floor of the building.\n     */\n    Building.prototype.createFloorButtons = function () {\n        var _this = this;\n        var floorButtonsContainer = this.createFloorButtonsContainer();\n        var _loop_1 = function (i) {\n            var button = this_1.createFloorButton(i);\n            button.addEventListener('click', function () {\n                _this.requestElevator(new Floor_1.Floor(i), button);\n            });\n            var div = this_1.createBlackLineDiv();\n            var floorDiv = this_1.createFloorDiv(button);\n            floorButtonsContainer.appendChild(floorDiv);\n            floorButtonsContainer.appendChild(div);\n        };\n        var this_1 = this;\n        for (var i = 0; i <= this.numberOfFloors; i++) {\n            _loop_1(i);\n        }\n        var scrollContainer = this.createScrollContainer(floorButtonsContainer);\n        this.container.appendChild(scrollContainer);\n    };\n    /**\n     * Creates the container for floor buttons.\n     * @returns The container element.\n     */\n    Building.prototype.createFloorButtonsContainer = function () {\n        var floorButtonsContainer = document.createElement('div');\n        floorButtonsContainer.classList.add('floorButtonsContainer');\n        return floorButtonsContainer;\n    };\n    /**\n     * Creates a floor button.\n     * @param floorNumber The number of the floor.\n     * @returns The created button element.\n     */\n    Building.prototype.createFloorButton = function (floorNumber) {\n        var button = document.createElement('button');\n        button.classList.add('floor', 'metal', 'linear');\n        button.innerText = floorNumber.toString();\n        var timer = document.createElement('div');\n        timer.classList.add('timer');\n        button.appendChild(timer);\n        return button;\n    };\n    /**\n     * Creates a black line div.\n     * @returns The created div element.\n     */\n    Building.prototype.createBlackLineDiv = function () {\n        var div = document.createElement('div');\n        div.classList.add('blackline');\n        div.style.height = '7px';\n        return div;\n    };\n    /**\n     * Creates a floor div.\n     * @param button The button associated with the floor.\n     * @returns The created div element.\n     */\n    Building.prototype.createFloorDiv = function (button) {\n        var floorDiv = document.createElement('div');\n        floorDiv.classList.add('floor');\n        floorDiv.style.height = '103px';\n        floorDiv.appendChild(button);\n        return floorDiv;\n    };\n    /**\n     * Creates the scroll container for floor buttons.\n     * @param floorButtonsContainer The container for floor buttons.\n     * @returns The created scroll container element.\n     */\n    Building.prototype.createScrollContainer = function (floorButtonsContainer) {\n        var scrollContainer = document.createElement('div');\n        scrollContainer.classList.add('scrollContainer');\n        scrollContainer.appendChild(floorButtonsContainer);\n        return scrollContainer;\n    };\n    /**\n     * Initializes the elevator system for the building.\n     */\n    Building.prototype.createElevatorSystem = function () {\n        var elevatorsContainer = document.createElement('div');\n        elevatorsContainer.classList.add('elevatorsContainer', 'elevator');\n        elevatorsContainer.style.width = \"\".concat(this.numberOfElevators * 50, \"px\");\n        this.container.appendChild(elevatorsContainer);\n        this.elevatorSystem = new ElevatorSystem_1.ElevatorSystem(elevatorsContainer, this.numberOfElevators);\n    };\n    /**\n     * Requests an elevator for the specified floor.\n     * @param floor The floor from which the elevator is requested.\n     * @param button The button associated with the floor.\n     */\n    Building.prototype.requestElevator = function (floor, button) {\n        this.elevatorSystem.requestElevator(floor);\n        button.style.color = 'green';\n        this.updateTimer(floor, button);\n    };\n    /**\n     * Sets up a listener for elevator arrival events.\n     */\n    Building.prototype.setupElevatorArrivalListener = function () {\n        var _this = this;\n        document.addEventListener('elevatorArrival', function (event) {\n            var floorLevel = event.detail.floorLevel;\n            _this.handleElevatorArrival(floorLevel);\n        });\n    };\n    /**\n     * Handles the arrival of an elevator at a floor.\n     * @param floorLevel The level of the floor where the elevator arrived.\n     */\n    Building.prototype.handleElevatorArrival = function (floorLevel) {\n        var buttons = document.querySelectorAll('.floorButtonsContainer .floor button');\n        buttons.forEach(function (button) {\n            if (button.innerText === floorLevel.toString()) {\n                var timer = button.querySelector('.timer');\n                if (timer) {\n                    timer.remove();\n                }\n            }\n        });\n    };\n    /**\n   * Updates the timer for floor buttons indicating elevator arrival.\n   * @param targetFloor The floor for which the timer is updated.\n   * @param button The button associated with the floor.\n   */\n    Building.prototype.updateTimer = function (targetFloor, button) {\n        var timer = this.getTimerElement(button);\n        if (!timer) {\n            timer = this.createTimerElement(button);\n        }\n        this.updateTimerDisplay(timer, targetFloor, button);\n    };\n    /**\n     * Retrieves the timer element associated with a floor button.\n     * @param button The button associated with the floor.\n     * @returns The timer element, if found, or null otherwise.\n     */\n    Building.prototype.getTimerElement = function (button) {\n        return button.querySelector('.timer');\n    };\n    /**\n     * Creates a timer element for a floor button.\n     * @param button The button associated with the floor.\n     * @returns The created timer element.\n     */\n    Building.prototype.createTimerElement = function (button) {\n        var timer = document.createElement('div');\n        timer.classList.add('timer');\n        button.appendChild(timer);\n        return timer;\n    };\n    /**\n     * Updates the timer display for a floor button indicating elevator arrival.\n     * @param timer The timer element.\n     * @param targetFloor The floor for which the timer is updated.\n     */\n    Building.prototype.updateTimerDisplay = function (timer, targetFloor, button) {\n        var closestElevator = this.findClosestElevator(targetFloor);\n        if (closestElevator) {\n            var seconds = this.calculateETA(targetFloor, closestElevator);\n            if (seconds <= 0) {\n                this.startRedCountdown(timer, button);\n            }\n            else {\n                this.updateTimerTextAndStyle(timer, seconds);\n                this.updateTimerInterval(timer, seconds, button);\n            }\n        }\n    };\n    /**\n     * Starts the red countdown timer after the elevator arrives at the floor.\n     * @param timer The timer element.\n     */\n    Building.prototype.startRedCountdown = function (timer, button) {\n        var seconds = 2;\n        timer.style.color = 'red';\n        timer.innerText = \"\".concat(seconds);\n        var interval = setInterval(function () {\n            seconds -= 0.5;\n            if (seconds >= 0.5) {\n                timer.innerText = \"\".concat(seconds);\n            }\n            else {\n                clearInterval(interval);\n                timer.remove();\n                button.style.color = '';\n            }\n        }, 500);\n    };\n    /**\n     * Finds the closest elevator to the target floor.\n     * @param targetFloor The target floor.\n     * @returns The closest elevator, if found, or null.\n     */\n    Building.prototype.findClosestElevator = function (targetFloor) {\n        var closestElevator = null;\n        var minDistance = Infinity;\n        this.elevatorSystem.elevators.forEach(function (elevator) {\n            var distance = Math.abs(targetFloor.level - elevator.currentFloor.level);\n            if (distance < minDistance) {\n                minDistance = distance;\n                closestElevator = elevator;\n            }\n        });\n        return closestElevator;\n    };\n    /**\n     * Calculates the estimated time of arrival (ETA) for the closest elevator to the target floor.\n     * @param targetFloor The target floor.\n     * @param closestElevator The closest elevator.\n     * @returns The estimated time of arrival in seconds.\n     */\n    Building.prototype.calculateETA = function (targetFloor, closestElevator) {\n        var currentFloor = closestElevator.currentFloor;\n        var distance = Math.abs(targetFloor.level - currentFloor.level);\n        var queueLength = closestElevator.queue ? closestElevator.queue.length : 0;\n        return distance * 0.5 + queueLength;\n    };\n    /**\n     * Updates the timer text and style.\n     * @param timer The timer element.\n     * @param seconds The remaining time in seconds.\n     */\n    Building.prototype.updateTimerTextAndStyle = function (timer, seconds) {\n        timer.innerText = \"\".concat(seconds);\n        timer.style.color = 'green';\n    };\n    /**\n     * Updates the timer every 0.5 seconds until reaching 0.\n     * @param timer The timer element.\n     * @param seconds The remaining time in seconds.\n     */\n    Building.prototype.updateTimerInterval = function (timer, seconds, button) {\n        var _this = this;\n        var interval = setInterval(function () {\n            seconds -= 0.5;\n            if (seconds > 0) {\n                timer.innerText = \"\".concat(seconds);\n            }\n            else {\n                button.style.color = '';\n                _this.startRedCountdown(timer, button);\n                clearInterval(interval);\n            }\n        }, 500);\n    };\n    return Building;\n}());\nexports.Building = Building;\n\n\n//# sourceURL=webpack:///./src/Building.ts?");

/***/ }),

/***/ "./src/BuildingFactory.ts":
/*!********************************!*\
  !*** ./src/BuildingFactory.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**BuildingFactory.ts\n * Represents a factory class for creating building objects with specified configurations.\n * Creates building elements in the DOM and instantiates Building objects.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BuildingFactory = void 0;\nvar Building_1 = __webpack_require__(/*! ./Building */ \"./src/Building.ts\");\nvar BuildingFactory = /** @class */ (function () {\n    function BuildingFactory() {\n    }\n    /**\n     * Creates a building with the specified number of floors and elevators.\n     * @param numberOfFloors The number of floors in the building.\n     * @param numberOfElevators The number of elevators in the building.\n     * @param buildingIndex The index of the building.\n     * @returns The created Building object.\n     */\n    BuildingFactory.prototype.createBuilding = function (numberOfFloors, numberOfElevators, buildingIndex) {\n        var _a;\n        var container = document.createElement('div');\n        container.classList.add('building');\n        container.style.width = \"\".concat(numberOfElevators * 100, \"px\");\n        container.style.marginLeft = \"\".concat(buildingIndex * (numberOfElevators * 100 + 250), \"px\");\n        (_a = document.getElementById('buildingsContainer')) === null || _a === void 0 ? void 0 : _a.appendChild(container);\n        return new Building_1.Building(numberOfFloors, container, numberOfElevators);\n    };\n    return BuildingFactory;\n}());\nexports.BuildingFactory = BuildingFactory;\n\n\n//# sourceURL=webpack:///./src/BuildingFactory.ts?");

/***/ }),

/***/ "./src/Elevator.ts":
/*!*************************!*\
  !*** ./src/Elevator.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/** Elevator.ts\n * Represents an elevator that can move between floors within a building.\n * Manages the elevator's movement, queue of floor requests, and updates its position visually.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Elevator = void 0;\nvar Floor_1 = __webpack_require__(/*! ./Floor */ \"./src/Floor.ts\");\nvar Elevator = /** @class */ (function () {\n    /**\n     * Constructs an Elevator object with the specified HTML element.\n     * @param element The HTML element representing the elevator.\n     */\n    function Elevator(element) {\n        this.currentFloor = new Floor_1.Floor(0);\n        this.isMoving = false;\n        this.queue = [];\n        this.isWaiting = false;\n        this.elevatorElement = element;\n        this.updateElevatorPosition();\n    }\n    /**\n     * Initiates the movement of the elevator to the specified floor.\n     * @param floor The target floor.\n     */\n    Elevator.prototype.move = function (floor) {\n        if (!this.isMoving) {\n            this.isMoving = true;\n            this.startElevatorMovement(floor);\n        }\n        else {\n            this.queue.push(floor);\n            this.isWaiting = true;\n        }\n    };\n    /**\n     * Starts the elevator's movement animation.\n     * @param floor The target floor.\n     */\n    Elevator.prototype.startElevatorMovement = function (floor) {\n        var _this = this;\n        var currentY = parseInt(getComputedStyle(this.elevatorElement).getPropertyValue('transform').split(',')[5], 10);\n        var targetY = -110 * floor.level;\n        var animationDuration = 0.5 * Math.abs(floor.level - this.currentFloor.level) * 1000;\n        this.animateElevator(currentY, targetY, animationDuration, function () {\n            _this.finishElevatorMovement(floor);\n        });\n    };\n    /**\n     * Finishes the elevator's movement after reaching the target floor.\n     * @param floor The target floor.\n     */\n    Elevator.prototype.finishElevatorMovement = function (floor) {\n        var _this = this;\n        this.currentFloor = floor;\n        console.log(\"Elevator arrived at floor \".concat(this.currentFloor.level));\n        this.updateElevatorPosition();\n        this.dispatchArrivalEvent();\n        this.playSound();\n        setTimeout(function () {\n            _this.isMoving = false;\n            if (_this.queue.length > 0) {\n                var nextFloor = _this.queue.shift();\n                if (nextFloor) {\n                    _this.move(nextFloor);\n                }\n            }\n            else {\n                _this.isWaiting = false;\n            }\n        }, 2000);\n    };\n    /**\n     * Animates the elevator's movement between floors.\n     * @param start The starting position.\n     * @param end The ending position.\n     * @param duration The duration of the animation.\n     * @param callback A callback function to execute after the animation completes.\n     */\n    Elevator.prototype.animateElevator = function (start, end, duration, callback) {\n        var _this = this;\n        var startTime = performance.now();\n        var animate = function (currentTime) {\n            var elapsedTime = currentTime - startTime;\n            var progress = Math.min(elapsedTime / duration, 1);\n            var newPosition = start + (end - start) * progress;\n            _this.elevatorElement.style.transform = \"translateY(\".concat(newPosition, \"px)\");\n            if (progress < 1) {\n                requestAnimationFrame(animate);\n            }\n            else {\n                callback();\n            }\n        };\n        requestAnimationFrame(animate);\n    };\n    /**\n     * Requests the elevator to stop at a specific floor.\n     * @param floor The target floor.\n     */\n    Elevator.prototype.requestFloor = function (floor) {\n        if (!this.isWaiting) {\n            this.move(floor);\n        }\n        else {\n            this.queue.push(floor);\n        }\n    };\n    /**\n      * Plays a sound when the elevator arrives at a floor.\n      */\n    Elevator.prototype.playSound = function () {\n        var audio = new Audio('../assets/ding.mp3'); //path is for the bundle.js which is in the dis folder\n        audio.play();\n        console.log('Ding!');\n    };\n    /**\n     * Updates the elevator's position visually.\n     */\n    Elevator.prototype.updateElevatorPosition = function () {\n        var translateY = \"calc(\".concat(this.currentFloor.level, \" * -110px)\");\n        this.elevatorElement.style.transform = \"translateY(\".concat(translateY, \")\");\n    };\n    /**\n     * Dispatches an event when the elevator arrives at a floor.\n     */\n    Elevator.prototype.dispatchArrivalEvent = function () {\n        var arrivalEvent = new CustomEvent('elevatorArrival', {\n            detail: {\n                floorLevel: this.currentFloor.level\n            }\n        });\n        document.dispatchEvent(arrivalEvent);\n    };\n    return Elevator;\n}());\nexports.Elevator = Elevator;\n\n\n//# sourceURL=webpack:///./src/Elevator.ts?");

/***/ }),

/***/ "./src/ElevatorSystem.ts":
/*!*******************************!*\
  !*** ./src/ElevatorSystem.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/** ElevatorSystem.ts\n * Represents an elevator system that manages multiple elevators.\n * Creates and handles the behavior of multiple elevators within a specified container.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ElevatorSystem = void 0;\nvar Elevator_1 = __webpack_require__(/*! ./Elevator */ \"./src/Elevator.ts\");\nvar ElevatorSystem = /** @class */ (function () {\n    /**\n     * Initializes the ElevatorSystem with a specified container and number of elevators.\n     * @param container The container element where the elevators will be displayed.\n     * @param numberOfElevators The number of elevators to be created in the system.\n     */\n    function ElevatorSystem(container, numberOfElevators) {\n        this.container = container;\n        this.numberOfElevators = numberOfElevators;\n        this.elevators = [];\n        this.createElevators();\n    }\n    /**\n     * Creates elevator instances based on the specified number of elevators.\n     */\n    ElevatorSystem.prototype.createElevators = function () {\n        for (var i = 0; i < this.numberOfElevators; i++) {\n            var elevator = new Elevator_1.Elevator(this.createElevatorElement());\n            this.container.appendChild(elevator.elevatorElement);\n            this.elevators.push(elevator);\n        }\n    };\n    /**\n     * Creates an HTML element representing an elevator.\n     * @returns The created elevator element.\n     */\n    ElevatorSystem.prototype.createElevatorElement = function () {\n        var elevatorElement = document.createElement('div');\n        var elevatorImage = document.createElement('img');\n        elevatorImage.src = '../assets/elv.png'; // Path relative to bundle.js in the dis folder\n        elevatorImage.alt = 'elevator';\n        elevatorElement.appendChild(elevatorImage);\n        return elevatorElement;\n    };\n    /**\n     * Requests an elevator to serve a floor.\n     * @param floor The floor where the elevator is requested.\n     */\n    ElevatorSystem.prototype.requestElevator = function (floor) {\n        var availableElevators = this.getAvailableElevators();\n        var selectedElevator = this.findClosestElevator(floor, availableElevators);\n        if (selectedElevator) {\n            selectedElevator.requestFloor(floor);\n        }\n    };\n    /**\n     * Retrieves the list of available elevators.\n     * @returns An array containing elevators that are not currently serving any request.\n     */\n    ElevatorSystem.prototype.getAvailableElevators = function () {\n        return this.elevators.filter(function (elevator) { return !elevator.isWaiting; });\n    };\n    /**\n     * Finds the closest available elevator to the specified floor.\n     * @param floor The floor where the elevator is requested.\n     * @param elevators The list of available elevators.\n     * @returns The closest available elevator, or null if none is available.\n     */\n    ElevatorSystem.prototype.findClosestElevator = function (floor, elevators) {\n        var closestElevator = null;\n        var shortestETA = Infinity;\n        elevators.forEach(function (elevator) {\n            var distance = Math.abs(elevator.currentFloor.level - floor.level);\n            var ETA = distance * 0.5 + elevator.queue.length;\n            if (ETA < shortestETA) {\n                shortestETA = ETA;\n                closestElevator = elevator;\n            }\n        });\n        return closestElevator;\n    };\n    return ElevatorSystem;\n}());\nexports.ElevatorSystem = ElevatorSystem;\n\n\n//# sourceURL=webpack:///./src/ElevatorSystem.ts?");

/***/ }),

/***/ "./src/Floor.ts":
/*!**********************!*\
  !*** ./src/Floor.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/** Floor.ts\n * Represents a floor in a building.\n * Each floor has a specific level number.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Floor = void 0;\nvar Floor = /** @class */ (function () {\n    /**\n    * Constructs a Floor object with the specified level number.\n    * @param level The level number of the floor.\n    */\n    function Floor(level) {\n        this.level = level;\n    }\n    return Floor;\n}());\nexports.Floor = Floor;\n\n\n//# sourceURL=webpack:///./src/Floor.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/App.ts");
/******/ 	
/******/ })()
;