**How to run the project**:
  Copy & paste the following commands to your (Linux) terminal:
    git clone https://github.com/OsherBerger/elevator.git
    cd elevator
    sudo npm install
    npm start

**How to change number of Floors/Elevators/Buildings**
  Go to 'src' folder.
  Go to 'index.ts'.
  Change number of Objects as needed.

**How to see all objects, when not all are displayed at zoom = 100%**
  Method 1: Use the keys:'Ctrl' + '-' together, as much as needed.
  Method 2: Use the scrolling option.

**Optional Feature**
  To add Background image, uncomment the Background part from App.ts

**Project Architecture Overview**

The Elevator System project aims to simulate an elevator system within a building.
The system is designed to handle multiple elevators and floors dynamically.
Here's an overview of the project architecture:

1. **HTML Structure**: 
The project's HTML file (`index.html`) contains the basic structure of the web page.
 It includes a container (`buildingsContainer`) where the buildings with elevators and floor buttons will be dynamically generated.
The HTML also includes links to the CSS and JavaScript files.

2. **CSS Styling**:
The CSS file (`index.css`) contains styles for various elements used in the project. 
It defines the appearance of floor buttons, elevator buttons, and elevator cabins. 
Additionally, it includes animations for elevator movement and button interactions.

3. **TypeScript/JavaScript Logic**:
 The JavaScript file (`index.js`) contains the core logic of the elevator system. 
 It defines several classes:

   - **Floor Class**: Represents a floor in the building.
    It stores the level number of the floor.
   
   - **Elevator Class**: Represents an elevator in the system. 
   It tracks the current floor, movement status, queue of requested floors, and handles elevator movement animations.
   
   - **ElevatorSystem Class**: Manages multiple elevators within the building. 
   It handles requests for elevator service, assigns available elevators to requested floors, and manages elevator queues.
   
   - **Building Class**: Represents a building with multiple floors and elevators. 
   It creates floor buttons and elevator systems within the building, handles elevator arrival events, and updates button colors and timers.
   
   - **BuildingFactory Class**: Generates multiple buildings with specified numbers of floors and elevators. 
   It creates building instances and sets their initial configurations.

4. **Project Initialization**: The script initializes the project by creating buildings with a specified number of floors and elevators. 
It calculates the necessary margins for arranging the buildings horizontally on the page.

Overall, the project architecture follows a modular and object-oriented approach to simulate a functional elevator system within a building environment. 
It dynamically handles user interactions with floor buttons and updates elevator movement and status in real-time.